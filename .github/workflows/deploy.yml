# Dashboard Hub - CI/CD Deployment to Hetzner + EasyPanel
name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: dashboard-hub
  CONTAINER_NAME: dashboard-hub-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker buildx build \
          --platform linux/amd64 \
          --tag ${{ env.DOCKER_IMAGE }}:latest \
          --tag ${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
          --load \
          .
    
    - name: Save Docker image
      run: docker save ${{ env.DOCKER_IMAGE }}:latest | gzip > dashboard-hub.tar.gz
    
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        script: |
          # Create deployment directory
          mkdir -p /opt/dashboard-hub
          cd /opt/dashboard-hub
          
          # Backup current deployment
          if [ -f docker-compose.yml ]; then
            docker-compose down || true
            cp docker-compose.yml docker-compose.yml.backup
          fi
    
    - name: Copy files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        source: "dashboard-hub.tar.gz,docker-compose.yml,.env.production"
        target: "/opt/dashboard-hub/"
    
    - name: Deploy application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        script: |
          cd /opt/dashboard-hub
          
          # Load new Docker image
          docker load < dashboard-hub.tar.gz
          
          # Deploy with docker-compose
          docker-compose down || true
          docker-compose up -d
          
          # Health check
          sleep 30
          curl -f http://localhost:3000/api/health || exit 1
          
          # Cleanup
          rm dashboard-hub.tar.gz
          docker image prune -f
          
          echo "✅ Deployment successful!"
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "🎉 Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi
